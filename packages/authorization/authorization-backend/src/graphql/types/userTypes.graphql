scalar Date

type User {
    id: ID!
    username: String!
    email: String!
    completeName: String
    dateBirth: Date
    phone: String
    role: Role
}

type PaginateUser {
    docs: [User!]
    totalDocs: Int!
    limit: Int!
    totalPages: Int!
    page: Int!
    hasPrevPage: Boolean!
    hasNextPage: Boolean!
}

type Query {
    userFindById(id: ID!): User
    userFetch: [User]
    userPaginate(input: PaginateInput): PaginateUser
    loguinUser(input: LoginInput): String
}

type Mutation {
    userUpdate(id: ID!, upgrade: UpdateUserInput!): User
    userDeleteById(id: ID!): User
    userCreateOne(input: UserInput): User
}

input LoginInput {
    username: String
    email: String
    password: String!
}

input PaginateInput {
    pageNumber: Int
    itemsPerPage: Int
    search: String
    filters: [FilterInput]
    orderBy: String
    orderDesc: Boolean
}

input FilterInput {
    id: ID
    username: String
    email: String
    completeName: String
    dateBirth: Date
    phone: String
}

input UpdateUserInput {
    username: String
    email: String
    password: String
    completeName: String
    dateBirth: Date
    phone: String
}

input UserInput {
    username: String!
    email: String!
    password: String!
    completeName: String
    dateBirth: Date
    phone: String
}